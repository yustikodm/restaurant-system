version: '3.8'

services:
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"  # AMQP protocol port
      - "15672:15672"  # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  menu-service:
    build:
      context: ./menu-service
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/restaurant
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - restaurant_network

  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/restaurant
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - restaurant_network

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/restaurant
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - restaurant_network

networks:
  restaurant_network:
    driver: bridge

volumes:
  mongodb_data: 